#pragma kernel KMain
#pragma kernel KInitialize

#pragma multi_compile _ ENABLE_ALPHA _AMD_FSR_HALF _AMD_FSR_NEEDS_CONVERT_TO_SRGB
#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch


#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

#include "Packages/com.unity.render-pipelines.universal/Shaders/PostProcessing/AMDFSR/amd_fsr.hlsl"

// one element:
// [0] = const0
// ComputeBuffer is allocated with stride sizeof(int)*4, 1 element
RWStructuredBuffer<uint4> _RCASParameters;

float _RCASScale;

TEXTURE2D_X(_RCASInputTexture);
RWTexture2D<float4> _RCASOutputTexture;

#ifdef _AMD_FSR_HALF
AH4 FsrRcasLoadH(ASW2 p)  {return AH4(AMD_FSR_TO_SRGB(_RCASInputTexture[p])); }
void FsrRcasInputH(inout AH1 r,inout AH1 g,inout AH1 b) {}
#else
AF4 FsrRcasLoadF(ASU2 p)  {return AMD_FSR_TO_SRGB(_RCASInputTexture[p]); }
void FsrRcasInputF(inout AF1 r,inout AF1 g,inout AF1 b) {}
#endif

void WritePix(AU2 gxy, AF4 casPix)
{
    _RCASOutputTexture[gxy] = casPix;
}


[numthreads(64, 1, 1)]
void KMain(uint3 LocalThreadId : SV_GroupThreadID, uint3 WorkGroupId : SV_GroupID, uint3 dispatchThreadId : SV_DispatchThreadID)
{
    // Do remapping of local xy in workgroup for a more PS-like swizzle pattern.
    AU2 gxy = ARmp8x8(LocalThreadId.x) + AU2(WorkGroupId.x << 3u, WorkGroupId.y << 3u);
#ifdef ENABLE_ALPHA
    AREAL alpha = LOAD_TEXTURE2D_X(_RCASInputTexture, gxy.xy).a;
#else
    AREAL alpha = 1.0;
#endif


    AU4 con = _RCASParameters[0];
#ifdef _AMD_FSR_HALF
    AH4 c;
    FsrRcasH(c.r, c.g, c.b, gxy, con);
#else
    AF4 c;
    FsrRcasF(c.r, c.g, c.b, gxy, con);
#endif

    c.a = alpha;
    WritePix(gxy, c);
}


/*
Doing this to avoid having to deal with any CPU side compilation of the headers.
The FsrRcasCon is doing some extra parameter packing (log space / pows etc) so its better
to keep this all in the GPU for simplicity sake, and avoid paying this cost for every wave.
The headers also dont compile for c#, they are meant for c and c++.
*/
[numthreads(1,1,1)]
void KInitialize()
{
    AU4 con;
    FsrRcasCon(con, _RCASScale);
    _RCASParameters[0] = con;
}
